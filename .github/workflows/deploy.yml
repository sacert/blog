name: Deploy to DigitalOcean

on:
  workflow_dispatch:    # Allows manual triggering of the workflow
  workflow_run:
    workflows: ["Run Tests"]
    branches: [main]
    types: [completed]

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Only run if the tests workflow was successful
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' || github.event_name == 'push' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'  # Use the Go version you're developing with
      
      - name: Download dependencies
        run: go mod download
      
      - name: Build application
        run: go build -o blog-app .
      
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2.5.1
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and export Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true  # Load the image locally
          tags: go-markdown-blog:latest
      
      - name: Save Docker image
        run: docker save go-markdown-blog:latest | gzip > go-markdown-blog.tar.gz
      
      - name: Copy Docker image and content to DigitalOcean Droplet
        run: |
          # Copy Docker image
          scp -o StrictHostKeyChecking=no go-markdown-blog.tar.gz ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }}:/tmp/
          
          # Create a tarball of the content directory
          tar -czf content.tar.gz content/
          
          # Copy content to Droplet
          scp -o StrictHostKeyChecking=no content.tar.gz ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }}:/tmp/
      
      - name: Deploy on DigitalOcean Droplet
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Load the Docker image
            docker load < /tmp/go-markdown-blog.tar.gz
            
            # Extract content to the mounted directory
            mkdir -p /opt/blog/content
            tar -xzf /tmp/content.tar.gz -C /opt/blog
            
            # Ensure proper permissions
            chown -R root:root /opt/blog/content
            chmod -R 755 /opt/blog/content
            
            # Stop and remove the existing container if it exists
            docker stop go-markdown-blog || true
            docker rm go-markdown-blog || true
            
            # Run the new container
            docker run -d \
              --name go-markdown-blog \
              -p 80:8080 \
              -v /opt/blog/content:/app/content \
              --restart unless-stopped \
              go-markdown-blog:latest
            
            # Clean up
            rm /tmp/go-markdown-blog.tar.gz
            rm /tmp/content.tar.gz
